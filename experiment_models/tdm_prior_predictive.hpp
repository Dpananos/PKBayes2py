
// Code generated by stanc v2.26.1
#include <stan/model/model_header.hpp>
namespace tdm_prior_predictive_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 31, column 2 to column 39)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 32, column 2 to column 40)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 33, column 2 to column 29)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 34, column 2 to column 42)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 35, column 2 to column 21)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 36, column 2 to column 38)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 37, column 2 to column 43)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 38, column 2 to column 42)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 41, column 6 to column 72)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 40, column 23 to line 42, column 5)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 40, column 4 to line 42, column 5)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 45, column 4 to column 50)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 44, column 17 to line 46, column 3)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 44, column 2 to line 46, column 3)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 22, column 2 to column 9)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 23, column 9 to column 11)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 23, column 2 to column 30)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 25, column 2 to column 14)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 26, column 9 to column 16)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 26, column 2 to column 24)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 27, column 9 to column 16)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 27, column 2 to column 29)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 36, column 9 to column 11)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 37, column 9 to column 11)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 4, column 11 to column 18)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 4, column 4 to column 22)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 6, column 6 to column 29)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 5, column 23 to line 7, column 5)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 5, column 4 to line 7, column 5)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 8, column 4 to column 13)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 2, column 28 to line 9, column 3)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 14, column 4 to column 94)",
                                                      " (in '/Users/demetri/gitrepos/PKBayes2py/experiment_models/tdm_prior_predictive.stan', line 12, column 58 to line 15, column 3)"};


template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
heaviside(const T0__& t_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& t = to_ref(t_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 25;
    validate_non_negative_index("y", "size(t)", size(t));
    Eigen::Matrix<local_scalar_t__, -1, 1> y;
    y = Eigen::Matrix<local_scalar_t__, -1, 1>(size(t));
    stan::math::fill(y, DUMMY_VAR__);
    
    current_statement__ = 29;
    for (int i = 1; i <= size(t); ++i) {
      current_statement__ = 27;
      assign(y, cons_list(index_uni(i), nil_index_list()),
        (logical_lte(t[(i - 1)], 0) ? 0 : 1), "assigning variable y");}
    current_statement__ = 30;
    return y;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct heaviside_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
operator()(const T0__& t, std::ostream* pstream__)  const 
{
return heaviside(t, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__, T3__,
T4__>, -1, 1>
conc(const T0__& D, const T1__& t_arg__, const T2__& Cl, const T3__& ka,
     const T4__& ke, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          T2__,
          T3__,
          T4__>;
  const auto& t = to_ref(t_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 32;
    return divide(
             multiply(
               elt_multiply(heaviside(t, pstream__),
                 subtract(stan::math::exp(multiply(-ka, t)),
                   stan::math::exp(multiply(-ke, t)))),
               (((0.5 * D) * ke) * ka)), (Cl * (ke - ka)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct conc_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__, T3__,
T4__>, -1, 1>
operator()(const T0__& D, const T1__& t, const T2__& Cl, const T3__& ka,
           const T4__& ke, std::ostream* pstream__)  const 
{
return conc(D, t, Cl, ka, ke, pstream__);
}
};

class tdm_prior_predictive_model final : public model_base_crtp<tdm_prior_predictive_model> {

 private:
  int nt;
  Eigen::Matrix<double, -1, 1> prediction_times;
  int n_doses;
  Eigen::Matrix<double, -1, 1> doses;
  Eigen::Matrix<double, -1, 1> dose_times;
 
 public:
  ~tdm_prior_predictive_model() { }
  
  inline std::string model_name() const final { return "tdm_prior_predictive_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1", "stancflags = "};
  }
  
  
  tdm_prior_predictive_model(stan::io::var_context& context__,
                             unsigned int random_seed__ = 0,
                             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "tdm_prior_predictive_model_namespace::tdm_prior_predictive_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 15;
      context__.validate_dims("data initialization","nt","int",
          context__.to_vec());
      nt = std::numeric_limits<int>::min();
      
      current_statement__ = 15;
      nt = context__.vals_i("nt")[(1 - 1)];
      current_statement__ = 16;
      validate_non_negative_index("prediction_times", "nt", nt);
      current_statement__ = 17;
      context__.validate_dims("data initialization","prediction_times",
          "double",context__.to_vec(nt));
      prediction_times = Eigen::Matrix<double, -1, 1>(nt);
      stan::math::fill(prediction_times, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prediction_times_flat__;
        current_statement__ = 17;
        assign(prediction_times_flat__, nil_index_list(),
          context__.vals_r("prediction_times"),
          "assigning variable prediction_times_flat__");
        current_statement__ = 17;
        pos__ = 1;
        current_statement__ = 17;
        for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
          current_statement__ = 17;
          assign(prediction_times,
            cons_list(index_uni(sym1__), nil_index_list()),
            prediction_times_flat__[(pos__ - 1)],
            "assigning variable prediction_times");
          current_statement__ = 17;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 18;
      context__.validate_dims("data initialization","n_doses","int",
          context__.to_vec());
      n_doses = std::numeric_limits<int>::min();
      
      current_statement__ = 18;
      n_doses = context__.vals_i("n_doses")[(1 - 1)];
      current_statement__ = 19;
      validate_non_negative_index("doses", "n_doses", n_doses);
      current_statement__ = 20;
      context__.validate_dims("data initialization","doses","double",
          context__.to_vec(n_doses));
      doses = Eigen::Matrix<double, -1, 1>(n_doses);
      stan::math::fill(doses, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> doses_flat__;
        current_statement__ = 20;
        assign(doses_flat__, nil_index_list(), context__.vals_r("doses"),
          "assigning variable doses_flat__");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= n_doses; ++sym1__) {
          current_statement__ = 20;
          assign(doses, cons_list(index_uni(sym1__), nil_index_list()),
            doses_flat__[(pos__ - 1)], "assigning variable doses");
          current_statement__ = 20;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 21;
      validate_non_negative_index("dose_times", "n_doses", n_doses);
      current_statement__ = 22;
      context__.validate_dims("data initialization","dose_times","double",
          context__.to_vec(n_doses));
      dose_times = Eigen::Matrix<double, -1, 1>(n_doses);
      stan::math::fill(dose_times, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> dose_times_flat__;
        current_statement__ = 22;
        assign(dose_times_flat__, nil_index_list(),
          context__.vals_r("dose_times"),
          "assigning variable dose_times_flat__");
        current_statement__ = 22;
        pos__ = 1;
        current_statement__ = 22;
        for (int sym1__ = 1; sym1__ <= n_doses; ++sym1__) {
          current_statement__ = 22;
          assign(dose_times, cons_list(index_uni(sym1__), nil_index_list()),
            dose_times_flat__[(pos__ - 1)], "assigning variable dose_times");
          current_statement__ = 22;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 23;
      validate_non_negative_index("C", "nt", nt);
      current_statement__ = 24;
      validate_non_negative_index("C_noise", "nt", nt);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "tdm_prior_predictive_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "tdm_prior_predictive_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double cl;
      cl = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      cl = lognormal_rng(0.69, 0.32, base_rng__);
      double tmax;
      tmax = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      tmax = lognormal_rng(0.98, 0.24, base_rng__);
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      alpha = beta_rng(2, 2, base_rng__);
      double ka;
      ka = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      ka = (stan::math::log(alpha) / (tmax * (alpha - 1)));
      double ke;
      ke = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      ke = (alpha * ka);
      Eigen::Matrix<double, -1, 1> C;
      C = Eigen::Matrix<double, -1, 1>(nt);
      stan::math::fill(C, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      assign(C, nil_index_list(), rep_vector(0.0, nt), "assigning variable C");
      Eigen::Matrix<double, -1, 1> C_noise;
      C_noise = Eigen::Matrix<double, -1, 1>(nt);
      stan::math::fill(C_noise, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      assign(C_noise, nil_index_list(), rep_vector(0.0, nt),
        "assigning variable C_noise");
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sigma = gamma_rng(250.67, 1458.77, base_rng__);
      current_statement__ = 11;
      for (int k = 1; k <= n_doses; ++k) {
        current_statement__ = 9;
        assign(C, nil_index_list(),
          add(stan::model::deep_copy(C),
            conc(doses[(k - 1)],
              subtract(prediction_times, dose_times[(k - 1)]), cl, ka,
              ke, pstream__)), "assigning variable C");}
      current_statement__ = 14;
      for (int i = 1; i <= nt; ++i) {
        current_statement__ = 12;
        assign(C_noise, cons_list(index_uni(i), nil_index_list()),
          lognormal_rng(stan::math::log(C[(i - 1)]), sigma, base_rng__),
          "assigning variable C_noise");}
      vars__.emplace_back(cl);
      vars__.emplace_back(tmax);
      vars__.emplace_back(alpha);
      vars__.emplace_back(ka);
      vars__.emplace_back(ke);
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        vars__.emplace_back(C[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        vars__.emplace_back(C_noise[(sym1__ - 1)]);}
      vars__.emplace_back(sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("cl");
    names__.emplace_back("tmax");
    names__.emplace_back("alpha");
    names__.emplace_back("ka");
    names__.emplace_back("ke");
    names__.emplace_back("C");
    names__.emplace_back("C_noise");
    names__.emplace_back("sigma");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nt)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nt)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "cl");
      param_names__.emplace_back(std::string() + "tmax");
      param_names__.emplace_back(std::string() + "alpha");
      param_names__.emplace_back(std::string() + "ka");
      param_names__.emplace_back(std::string() + "ke");
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "C" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "C_noise" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "sigma");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "cl");
      param_names__.emplace_back(std::string() + "tmax");
      param_names__.emplace_back(std::string() + "alpha");
      param_names__.emplace_back(std::string() + "ka");
      param_names__.emplace_back(std::string() + "ke");
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "C" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "C_noise" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "sigma");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"cl\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tmax\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"ka\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"ke\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"C\",\"type\":{\"name\":\"vector\",\"length\":" << nt << "},\"block\":\"generated_quantities\"},{\"name\":\"C_noise\",\"type\":{\"name\":\"vector\",\"length\":" << nt << "},\"block\":\"generated_quantities\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"cl\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tmax\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"ka\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"ke\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"C\",\"type\":{\"name\":\"vector\",\"length\":" << nt << "},\"block\":\"generated_quantities\"},{\"name\":\"C_noise\",\"type\":{\"name\":\"vector\",\"length\":" << nt << "},\"block\":\"generated_quantities\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}

using stan_model = tdm_prior_predictive_model_namespace::tdm_prior_predictive_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return tdm_prior_predictive_model_namespace::profiles__;
}

#endif


